#!/usr/bin/env python3

"""
Generate JIRA and GitLab references and insert them in the commit message.

The following refences will be generated (if available):

* Pivotal story URL -- generated from the ID in the branch name
* JIRA issue(s) -- taken from the branch name
* GitLab Merge Request -- taken from the clipboard (expects a
  GitLab Merge Request URL, can contain a link to a comment)
* GitLab comment -- taken from the clipboard (expects a GitLab Comment URL)

Which references to search for is determined on which 'features' are available
-- controlled by the ENABLED_FEATURES variable.

If any references are found, a 'refs' section will be inserted in the commit
message with them.

Can be used the same as git-commit -- all the options for git-commit will work
with this script as well.
"""

# REQUIREMENTS: xclip

import argparse
import re
import subprocess
import tempfile
import textwrap
import sys
import abc


def get_stdout(bash_cmd):
    result = subprocess.run(bash_cmd.split(), stdout=subprocess.PIPE)
    return result.stdout.decode('utf-8').strip()


class Feature(abc.ABC):
    def __init__(self, branch_name, clipboard=None):
        self.branch_name = branch_name
        self.clipboard = clipboard

    @abc.abstractmethod
    def get_ref(self):
        ...


class JiraIssuesFeature(Feature):
    JIRA_ISSUES_RE = re.compile(r'([A-Z]{2,}\-\d+)')

    def get_ref(self):
        jira_issues = self.JIRA_ISSUES_RE.findall(self.branch_name)

        if not jira_issues:
            return None

        if len(jira_issues) == 1:
            return "JIRA Issue: {}".format(jira_issues[0])

        return "JIRA Issues: {}".format(', '.join(jira_issues))


class PivotalStoryFeature(Feature):
    PIVOTAL_STORY_ID_RE = re.compile(r'^\w/[^/]+/#?(\d+)$')
    PIVOTAL_URL_TEMPLATE = "https://www.pivotaltracker.com/n/projects/1447360/stories/{story_id}"

    def get_ref(self):
        story_id_match = self.PIVOTAL_STORY_ID_RE.search(self.branch_name)

        if story_id_match is None:
            return None

        return "Pivotal Story: {}".format(
            self.PIVOTAL_URL_TEMPLATE.format(story_id=story_id_match.group(1)),
        )


class GitlabFeature(Feature):
    GITLAB_URL_RE = re.compile(r'''
        ^https?://(?:git|gitlab)\.[\w\-\.]+\.(?:com|net)
        /(?P<group>[\w-]+)
        /(?P<project>[\w-]+)
        (?:/\-)?
        /merge_requests/(?P<mr_id>\d+)
        (?P<comment>\#note_\d+)?
    ''', flags=re.VERBOSE | re.IGNORECASE)


class GitlabMergeRequestFeature(GitlabFeature):
    def get_ref(self):
        gitlab_url_match = self.GITLAB_URL_RE.search(self.clipboard)

        if gitlab_url_match is None:
            return None

        return "GitLab Merge Request: {group}/{project}!{mr_id}".format(
            group=gitlab_url_match.group('group'),
            project=gitlab_url_match.group('project'),
            mr_id=gitlab_url_match.group('mr_id'),
        )


class GitLabDiscussionFeature(GitlabFeature):
    def get_ref(self):
        gitlab_url_match = self.GITLAB_URL_RE.search(self.clipboard)

        if gitlab_url_match is None or gitlab_url_match.group('comment') is None:
            return None

        return "GitLab Discussion: {}".format(self.clipboard)


ENABLED_FEATURES = [
    PivotalStoryFeature,
    GitlabMergeRequestFeature,
    GitLabDiscussionFeature,
]


def parse_args():
    parser = argparse.ArgumentParser(
        prog='git cmt',
        description=__doc__.strip(),
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        '-m',
        '--message',
        dest='commit_msg',
        metavar='<msg>',
        required=False,
        help="The commit message. If not provided, an editor will open",
    )

    # If we use something like `git cmt -am "Commit message"`, argparse won't
    # assign a value to commit_msg since there is no defined `-a` argument.
    # Instead, it will pass `-am` to git, which will result to a regular commit
    # without appending the necessary references. To fix this, we check for
    # "combined arguments" with `m` in them and just remove it from there and
    # add it as a seperate argument, basically converting `-am` to `-a -m`.

    args = []
    for arg in sys.argv[1:]:
        if re.search(r'^\-\w+', arg) and 'm' in arg:
            args_without_msg = arg.replace('m', '')

            if args_without_msg != '-':
                args.append(args_without_msg)

            args.append('-m')
        else:
            args.append(arg)

    return parser.parse_known_args(args)


def main(args, git_args):
    branch_name = get_stdout('git rev-parse --abbrev-ref HEAD')
    clipboard_contents = get_stdout('xclip -selection clipboad -o')

    refs = []

    for feature_cls in ENABLED_FEATURES:
        feature = feature_cls(branch_name, clipboard_contents)
        ref = feature.get_ref()

        if ref is not None:
            refs.append('* {}'.format(ref))

    if refs:
        commit_template = textwrap.dedent("""
            {commit_msg}
            refs:

            {refs}
        """).format(
            commit_msg=(args.commit_msg + '\n') if args.commit_msg is not None else '',
            refs="\n".join(refs),
        )

        with tempfile.NamedTemporaryFile('w') as commit_file:
            commit_file.write(commit_template)
            commit_file.seek(0)

            if args.commit_msg is None:
                subprocess.call(['git', 'commit', '--template', commit_file.name, *git_args])
            else:
                subprocess.call(['git', 'commit', '--file', commit_file.name, *git_args])
    else:
        if args.commit_msg is None:
            subprocess.call(['git', 'commit', *git_args])
        else:
            subprocess.call(['git', 'commit', '-m', args.commit_msg, *git_args])


if __name__ == '__main__':
    args, git_args = parse_args()
    main(args, git_args)
